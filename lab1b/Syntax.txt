<program>::= <compound_statement> | <program><compound_statement>
<constant>::= <string> | <char> | <integer>
<declist>::= <declaration> | <declaration> "," <declist>
<declaration>::= <type> "IDENTIFIER" | <declaration_and_assign_statement>
<declaration_and_assign_statement> = <type> "IDENTIFIER" "=" <consant>
<type1>::= "INT" | "CHAR" | "STRING"
<assign_satement>::= "IDENTIFIER" "=" <expression> | <array_element>=<expression>
<array_declaration>::= <declaration> "=" "LIST()"
<array_element>:== <identifier> "["<integer>"]"
<type>::=<type1>|<array_declaration>
<compound_statement>::= "{"<statement_list>"}"
<statement_list>::=<statement> ";" | <statement> ";" <statement_list>
<statement>::= <declaration> | <simple_statement> | <structured_statement>
<simple_statement>::= <assign_statement> | <iostatement>
<io_statement>::= "READ" "(" IDENTIFIER ")" | "WRITE" "(" IDENTIFIER ")"
<priority2_operator>::= + | -
<proirity1_operator>::= / | * | %
<expression>::=<term>|<term><operator1><term>
<term>::=<factor>|<factor><operator2><factor>
<factor>::=<identifier>|<constant>|"("<expression>")"
<structured_statement>::= <compound_statement> | <if_statement> | <while_stamtent>
<simple_statement>::= <assign_statement>| <io_statement>
<while_statement>::= <while> "(" <condition ")" {<statement>
<if_statement>::= "IF" "("<condition>")" {<statement>} | "ELSE" <simple_statement>
<condition>::= <expression> | <expression><relation><condition>
<relation>::= < | <= | == | >= | > | != | "AND" | "OR"
<comment>::= "#"<string>"#"